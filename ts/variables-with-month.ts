// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { VariableWithValues } from './variable-with-values.js';


export class VariablesWithMonth {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VariablesWithMonth {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVariablesWithMonth(bb:flatbuffers.ByteBuffer, obj?:VariablesWithMonth):VariablesWithMonth {
  return (obj || new VariablesWithMonth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVariablesWithMonth(bb:flatbuffers.ByteBuffer, obj?:VariablesWithMonth):VariablesWithMonth {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VariablesWithMonth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

year():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

month():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

variables(index: number, obj?:VariableWithValues):VariableWithValues|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new VariableWithValues()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

}
