// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SiUnit } from './si-unit.js';
import { Variable } from './variable.js';


export class SingleValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SingleValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSingleValue(bb:flatbuffers.ByteBuffer, obj?:SingleValue):SingleValue {
  return (obj || new SingleValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSingleValue(bb:flatbuffers.ByteBuffer, obj?:SingleValue):SingleValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SingleValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

variable():Variable {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Variable.undefined;
}

unit():SiUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiUnit.undefined;
}

altitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

pressureLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

depth():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

depthTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSingleValue(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addVariable(builder:flatbuffers.Builder, variable:Variable) {
  builder.addFieldInt8(0, variable, Variable.undefined);
}

static addUnit(builder:flatbuffers.Builder, unit:SiUnit) {
  builder.addFieldInt8(1, unit, SiUnit.undefined);
}

static addAltitude(builder:flatbuffers.Builder, altitude:number) {
  builder.addFieldInt16(2, altitude, 0);
}

static addPressureLevel(builder:flatbuffers.Builder, pressureLevel:number) {
  builder.addFieldInt16(3, pressureLevel, 0);
}

static addDepth(builder:flatbuffers.Builder, depth:number) {
  builder.addFieldInt16(4, depth, 0);
}

static addDepthTo(builder:flatbuffers.Builder, depthTo:number) {
  builder.addFieldInt16(5, depthTo, 0);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(6, value, 0.0);
}

static endSingleValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSingleValue(builder:flatbuffers.Builder, variable:Variable, unit:SiUnit, altitude:number, pressureLevel:number, depth:number, depthTo:number, value:number):flatbuffers.Offset {
  SingleValue.startSingleValue(builder);
  SingleValue.addVariable(builder, variable);
  SingleValue.addUnit(builder, unit);
  SingleValue.addAltitude(builder, altitude);
  SingleValue.addPressureLevel(builder, pressureLevel);
  SingleValue.addDepth(builder, depth);
  SingleValue.addDepthTo(builder, depthTo);
  SingleValue.addValue(builder, value);
  return SingleValue.endSingleValue(builder);
}
}
