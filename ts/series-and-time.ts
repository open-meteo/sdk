// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Series } from './series.js';


export class SeriesAndTime {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SeriesAndTime {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSeriesAndTime(bb:flatbuffers.ByteBuffer, obj?:SeriesAndTime):SeriesAndTime {
  return (obj || new SeriesAndTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSeriesAndTime(bb:flatbuffers.ByteBuffer, obj?:SeriesAndTime):SeriesAndTime {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeriesAndTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

start():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

end():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

series(index: number, obj?:Series):Series|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Series()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

seriesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

}
