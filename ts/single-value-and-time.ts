// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SingleValue } from './single-value.js';


export class SingleValueAndTime {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SingleValueAndTime {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSingleValueAndTime(bb:flatbuffers.ByteBuffer, obj?:SingleValueAndTime):SingleValueAndTime {
  return (obj || new SingleValueAndTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSingleValueAndTime(bb:flatbuffers.ByteBuffer, obj?:SingleValueAndTime):SingleValueAndTime {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SingleValueAndTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

series(index: number, obj?:SingleValue):SingleValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new SingleValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

seriesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSingleValueAndTime(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(0, time, BigInt('0'));
}

static addInterval(builder:flatbuffers.Builder, interval:number) {
  builder.addFieldInt32(1, interval, 0);
}

static addSeries(builder:flatbuffers.Builder, seriesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, seriesOffset, 0);
}

static createSeriesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeriesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSingleValueAndTime(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSingleValueAndTime(builder:flatbuffers.Builder, time:bigint, interval:number, seriesOffset:flatbuffers.Offset):flatbuffers.Offset {
  SingleValueAndTime.startSingleValueAndTime(builder);
  SingleValueAndTime.addTime(builder, time);
  SingleValueAndTime.addInterval(builder, interval);
  SingleValueAndTime.addSeries(builder, seriesOffset);
  return SingleValueAndTime.endSingleValueAndTime(builder);
}
}
