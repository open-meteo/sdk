[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name =  "openmeteo_sdk"
version = "0.0.0"
authors = [
    {name = "Patrick Zippenfenig", email = "info@open-meteo.com"},
]
description = "Open-Meteo Python SDK"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]
requires-python = ">=3.8.1"
dependencies = [
  "flatbuffers>=23.0.0",
]

[project.optional-dependencies]
spark = [
    "pyspark>=3.0.0"
]
test = [
    "bandit[toml]==1.7.5",
    "black==23.10.1",
    "check-manifest==0.49",
    "flake8-bugbear==23.9.16",
    "flake8-docstrings",
    "flake8-formatter_junit_xml",
    "flake8",
    "flake8-pyproject",
    "pre-commit==3.5.0",
    "pylint==3.0.1",
    "pylint_junit",
    "pytest-cov==4.1.0",
    "pytest-mock<3.11.2",
    "pytest-runner",
    "pytest==7.4.2",
    "pytest-asyncio",
    "pytest-github-actions-annotate-failures",
    "shellcheck-py==0.9.0.6"
]

[project.urls]
Documentation = "https://github.com/open-meteo/sdk/tree/main#readme"
Source = "https://github.com/open-meteo/sdk"
Tracker = "https://github.com/open-meteo/sdk/issues"

[tool.flit.module]
name = "openmeteo_sdk"

[tool.hatch.version]
path = "python/openmeteo_sdk/__init__.py"

[tool.hatch.build.targets.sdist]
packages = ["python/openmeteo_sdk"]

[tool.hatch.build.targets.wheel]
packages = ["python/openmeteo_sdk"]

[tool.bandit]
exclude_dirs = ["build","dist","tests","scripts"]
number = 4
recursive = true
targets = "python"

[tool.black]
line-length = 120
fast = true

[tool.isort]
profile = "black"

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.flake8]
max-line-length = 120
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "swagger_client",
    "./node_modules"
]
ignore = [
    "E722",
    "B001",
    "W503",
    "E203"
]

[tool.pyright]
include = ["python"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
venv = "env37"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.7"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = "python" }
]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov python --cov-fail-under 0 --cov-append -m 'not integration'"
pythonpath = [
  "python"
]
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py, integration, spark, all

[testenv]
commands =
    pytest -m "not integration and not spark" {posargs}

[testenv:integration]
commands =
    pytest -m "integration" {posargs}

[testenv:spark]
extras = spark
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest -m "spark" {posargs}

[testenv:all]
extras = all
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest {posargs}
"""

[tool.pylint]
extension-pkg-whitelist= [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy"
]
ignore="CVS"
ignore-patterns="test.*?py,conftest.py"
ignore-paths="python/openmeteo_sdk/fb/"
init-hook='import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs=0
limit-inference-results=100
persistent="yes"
suggestion-mode="yes"
unsafe-load-any-extension="no"

[tool.pylint.'MESSAGES CONTROL']
enable="c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format="text"
reports="no"
score="yes"

[tool.pylint.'REFACTORING']
max-nested-blocks=5
never-returning-functions="sys.exit"

[tool.pylint.'BASIC']
argument-naming-style="snake_case"
attr-naming-style="snake_case"
bad-names= [
    "foo",
    "bar"
]
class-attribute-naming-style="any"
class-naming-style="PascalCase"
const-naming-style="UPPER_CASE"
docstring-min-length=-1
function-naming-style="snake_case"
good-names= [
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_"
]
include-naming-hint="yes"
inlinevar-naming-style="any"
method-naming-style="snake_case"
module-naming-style="any"
no-docstring-rgx="^_"
property-classes="abc.abstractproperty"
variable-naming-style="snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines="^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren=4
indent-string='    '
max-line-length=120
max-module-lines=1000
single-line-class-stmt="no"
single-line-if-stmt="no"

[tool.pylint.'LOGGING']
logging-format-style="old"
logging-modules="logging"

[tool.pylint.'MISCELLANEOUS']
notes= [
    "FIXME",
    "XXX",
    "TODO"
]

[tool.pylint.'SIMILARITIES']
ignore-comments="yes"
ignore-docstrings="yes"
ignore-imports="yes"
min-similarity-lines=7

[tool.pylint.'SPELLING']
max-spelling-suggestions=4
spelling-store-unknown-words="no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps="no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators="contextlib.contextmanager"
generated-members="numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members="yes"
ignore-none="yes"
ignore-on-opaque-inference="yes"
ignored-classes="optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules="numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint="yes"
missing-member-hint-distance=1
missing-member-max-choices=1

[tool.pylint.'VARIABLES']
additional-builtins="dbutils"
allow-global-unused-variables="yes"
callbacks= [
    "cb_",
    "_cb"
]
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names="_.*|^ignored_|^unused_"
init-import="no"
redefining-builtins-modules="six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods= [
    "__init__",
    "__new__",
    "setUp",
    "__post_init__"
]
exclude-protected= [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make"
]
valid-classmethod-first-arg="cls"
valid-metaclass-classmethod-first-arg="cls"

[tool.pylint.'DESIGN']
max-args=5
max-attributes=7
max-bool-expr=5
max-branches=12
max-locals=15
max-parents=7
max-public-methods=20
max-returns=6
max-statements=50
min-public-methods=2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all="no"
analyse-fallback-blocks="no"
deprecated-modules="optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions= [
    "uiltins.BaseException",
    "uiltins.Exception"
]
