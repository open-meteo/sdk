// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace openmeteo_sdk
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VariablesWithTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static VariablesWithTime GetRootAsVariablesWithTime(ByteBuffer _bb) { return GetRootAsVariablesWithTime(_bb, new VariablesWithTime()); }
  public static VariablesWithTime GetRootAsVariablesWithTime(ByteBuffer _bb, VariablesWithTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VariablesWithTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeEnd { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Interval { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public openmeteo_sdk.VariableWithValues? Variables(int j) { int o = __p.__offset(10); return o != 0 ? (openmeteo_sdk.VariableWithValues?)(new openmeteo_sdk.VariableWithValues()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<openmeteo_sdk.VariablesWithTime> CreateVariablesWithTime(FlatBufferBuilder builder,
      long time = 0,
      long time_end = 0,
      int interval = 0,
      VectorOffset variablesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    VariablesWithTime.AddTimeEnd(builder, time_end);
    VariablesWithTime.AddTime(builder, time);
    VariablesWithTime.AddVariables(builder, variablesOffset);
    VariablesWithTime.AddInterval(builder, interval);
    return VariablesWithTime.EndVariablesWithTime(builder);
  }

  public static void StartVariablesWithTime(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTime(FlatBufferBuilder builder, long time) { builder.AddLong(0, time, 0); }
  public static void AddTimeEnd(FlatBufferBuilder builder, long timeEnd) { builder.AddLong(1, timeEnd, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int interval) { builder.AddInt(2, interval, 0); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(3, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<openmeteo_sdk.VariableWithValues>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, Offset<openmeteo_sdk.VariableWithValues>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<openmeteo_sdk.VariableWithValues>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<openmeteo_sdk.VariableWithValues>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<openmeteo_sdk.VariablesWithTime> EndVariablesWithTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<openmeteo_sdk.VariablesWithTime>(o);
  }
}


static public class VariablesWithTimeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Time*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TimeEnd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Interval*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Variables*/, openmeteo_sdk.VariableWithValuesVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
