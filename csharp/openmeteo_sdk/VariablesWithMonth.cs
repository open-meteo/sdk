// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace openmeteo_sdk
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VariablesWithMonth : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static VariablesWithMonth GetRootAsVariablesWithMonth(ByteBuffer _bb) { return GetRootAsVariablesWithMonth(_bb, new VariablesWithMonth()); }
  public static VariablesWithMonth GetRootAsVariablesWithMonth(ByteBuffer _bb, VariablesWithMonth obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VariablesWithMonth __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Year { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public sbyte Month { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public int Count { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public openmeteo_sdk.VariableWithValues? Variables(int j) { int o = __p.__offset(10); return o != 0 ? (openmeteo_sdk.VariableWithValues?)(new openmeteo_sdk.VariableWithValues()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<openmeteo_sdk.VariablesWithMonth> CreateVariablesWithMonth(FlatBufferBuilder builder,
      short year = 0,
      sbyte month = 0,
      int count = 0,
      VectorOffset variablesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    VariablesWithMonth.AddVariables(builder, variablesOffset);
    VariablesWithMonth.AddCount(builder, count);
    VariablesWithMonth.AddYear(builder, year);
    VariablesWithMonth.AddMonth(builder, month);
    return VariablesWithMonth.EndVariablesWithMonth(builder);
  }

  public static void StartVariablesWithMonth(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddYear(FlatBufferBuilder builder, short year) { builder.AddShort(0, year, 0); }
  public static void AddMonth(FlatBufferBuilder builder, sbyte month) { builder.AddSbyte(1, month, 0); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(2, count, 0); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(3, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<openmeteo_sdk.VariableWithValues>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, Offset<openmeteo_sdk.VariableWithValues>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<openmeteo_sdk.VariableWithValues>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<openmeteo_sdk.VariableWithValues>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<openmeteo_sdk.VariablesWithMonth> EndVariablesWithMonth(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<openmeteo_sdk.VariablesWithMonth>(o);
  }
}


static public class VariablesWithMonthVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Year*/, 2 /*short*/, 2, false)
      && verifier.VerifyField(tablePos, 6 /*Month*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Variables*/, openmeteo_sdk.VariableWithValuesVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
