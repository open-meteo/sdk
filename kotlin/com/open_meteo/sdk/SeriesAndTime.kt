// automatically generated by the FlatBuffers compiler, do not modify

package com.open_meteo.sdk

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class SeriesAndTime : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeriesAndTime {
        __init(_i, _bb)
        return this
    }
    val start : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val end : Long
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val interval : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun series(j: Int) : com.open_meteo.sdk.Series? = series(com.open_meteo.sdk.Series(), j)
    fun series(obj: com.open_meteo.sdk.Series, j: Int) : com.open_meteo.sdk.Series? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val seriesLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsSeriesAndTime(_bb: ByteBuffer): SeriesAndTime = getRootAsSeriesAndTime(_bb, SeriesAndTime())
        fun getRootAsSeriesAndTime(_bb: ByteBuffer, obj: SeriesAndTime): SeriesAndTime {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSeriesAndTime(builder: FlatBufferBuilder, start: Long, end: Long, interval: Int, seriesOffset: Int) : Int {
            builder.startTable(4)
            addEnd(builder, end)
            addStart(builder, start)
            addSeries(builder, seriesOffset)
            addInterval(builder, interval)
            return endSeriesAndTime(builder)
        }
        fun startSeriesAndTime(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addStart(builder: FlatBufferBuilder, start: Long) = builder.addLong(0, start, 0L)
        fun addEnd(builder: FlatBufferBuilder, end: Long) = builder.addLong(1, end, 0L)
        fun addInterval(builder: FlatBufferBuilder, interval: Int) = builder.addInt(2, interval, 0)
        fun addSeries(builder: FlatBufferBuilder, series: Int) = builder.addOffset(3, series, 0)
        fun createSeriesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeriesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSeriesAndTime(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
