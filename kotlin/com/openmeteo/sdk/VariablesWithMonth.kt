// automatically generated by the FlatBuffers compiler, do not modify

package com.openmeteo.sdk

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class VariablesWithMonth : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VariablesWithMonth {
        __init(_i, _bb)
        return this
    }
    val year : Short
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos) else 0
        }
    val month : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val count : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun variables(j: Int) : com.openmeteo.sdk.VariableWithValues? = variables(com.openmeteo.sdk.VariableWithValues(), j)
    fun variables(obj: com.openmeteo.sdk.VariableWithValues, j: Int) : com.openmeteo.sdk.VariableWithValues? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val variablesLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsVariablesWithMonth(_bb: ByteBuffer): VariablesWithMonth = getRootAsVariablesWithMonth(_bb, VariablesWithMonth())
        fun getRootAsVariablesWithMonth(_bb: ByteBuffer, obj: VariablesWithMonth): VariablesWithMonth {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createVariablesWithMonth(builder: FlatBufferBuilder, year: Short, month: Byte, count: Int, variablesOffset: Int) : Int {
            builder.startTable(4)
            addVariables(builder, variablesOffset)
            addCount(builder, count)
            addYear(builder, year)
            addMonth(builder, month)
            return endVariablesWithMonth(builder)
        }
        fun startVariablesWithMonth(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addYear(builder: FlatBufferBuilder, year: Short) = builder.addShort(0, year, 0)
        fun addMonth(builder: FlatBufferBuilder, month: Byte) = builder.addByte(1, month, 0)
        fun addCount(builder: FlatBufferBuilder, count: Int) = builder.addInt(2, count, 0)
        fun addVariables(builder: FlatBufferBuilder, variables: Int) = builder.addOffset(3, variables, 0)
        fun createVariablesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVariablesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endVariablesWithMonth(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
