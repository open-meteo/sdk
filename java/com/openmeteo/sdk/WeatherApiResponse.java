// automatically generated by the FlatBuffers compiler, do not modify

package com.openmeteo.sdk;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import javax.annotation.Nullable;

@SuppressWarnings("unused")
public final class WeatherApiResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static WeatherApiResponse getRootAsWeatherApiResponse(ByteBuffer _bb) { return getRootAsWeatherApiResponse(_bb, new WeatherApiResponse()); }
  public static WeatherApiResponse getRootAsWeatherApiResponse(ByteBuffer _bb, WeatherApiResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WeatherApiResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float latitude() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float longitude() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float elevation() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float generationTimeMilliseconds() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long locationId() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int model() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int utcOffsetSeconds() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public  @Nullable String timezone() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timezoneAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer timezoneInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public  @Nullable String timezoneAbbreviation() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timezoneAbbreviationAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer timezoneAbbreviationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime current() { return current(new com.openmeteo.sdk.VariablesWithTime()); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime current(com.openmeteo.sdk.VariablesWithTime obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime daily() { return daily(new com.openmeteo.sdk.VariablesWithTime()); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime daily(com.openmeteo.sdk.VariablesWithTime obj) { int o = __offset(24); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime hourly() { return hourly(new com.openmeteo.sdk.VariablesWithTime()); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime hourly(com.openmeteo.sdk.VariablesWithTime obj) { int o = __offset(26); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime minutely15() { return minutely15(new com.openmeteo.sdk.VariablesWithTime()); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime minutely15(com.openmeteo.sdk.VariablesWithTime obj) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime sixHourly() { return sixHourly(new com.openmeteo.sdk.VariablesWithTime()); }
  public  @Nullable com.openmeteo.sdk.VariablesWithTime sixHourly(com.openmeteo.sdk.VariablesWithTime obj) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createWeatherApiResponse(FlatBufferBuilder builder,
      float latitude,
      float longitude,
      float elevation,
      float generationTimeMilliseconds,
      long locationId,
      int model,
      int utcOffsetSeconds,
      int timezoneOffset,
      int timezoneAbbreviationOffset,
      int currentOffset,
      int dailyOffset,
      int hourlyOffset,
      int minutely15Offset,
      int sixHourlyOffset) {
    builder.startTable(14);
    WeatherApiResponse.addLocationId(builder, locationId);
    WeatherApiResponse.addSixHourly(builder, sixHourlyOffset);
    WeatherApiResponse.addMinutely15(builder, minutely15Offset);
    WeatherApiResponse.addHourly(builder, hourlyOffset);
    WeatherApiResponse.addDaily(builder, dailyOffset);
    WeatherApiResponse.addCurrent(builder, currentOffset);
    WeatherApiResponse.addTimezoneAbbreviation(builder, timezoneAbbreviationOffset);
    WeatherApiResponse.addTimezone(builder, timezoneOffset);
    WeatherApiResponse.addUtcOffsetSeconds(builder, utcOffsetSeconds);
    WeatherApiResponse.addGenerationTimeMilliseconds(builder, generationTimeMilliseconds);
    WeatherApiResponse.addElevation(builder, elevation);
    WeatherApiResponse.addLongitude(builder, longitude);
    WeatherApiResponse.addLatitude(builder, latitude);
    WeatherApiResponse.addModel(builder, model);
    return WeatherApiResponse.endWeatherApiResponse(builder);
  }

  public static void startWeatherApiResponse(FlatBufferBuilder builder) { builder.startTable(14); }
  public static void addLatitude(FlatBufferBuilder builder, float latitude) { builder.addFloat(0, latitude, 0.0f); }
  public static void addLongitude(FlatBufferBuilder builder, float longitude) { builder.addFloat(1, longitude, 0.0f); }
  public static void addElevation(FlatBufferBuilder builder, float elevation) { builder.addFloat(2, elevation, 0.0f); }
  public static void addGenerationTimeMilliseconds(FlatBufferBuilder builder, float generationTimeMilliseconds) { builder.addFloat(3, generationTimeMilliseconds, 0.0f); }
  public static void addLocationId(FlatBufferBuilder builder, long locationId) { builder.addLong(4, locationId, 0L); }
  public static void addModel(FlatBufferBuilder builder, int model) { builder.addByte(5, (byte) model, (byte) 0); }
  public static void addUtcOffsetSeconds(FlatBufferBuilder builder, int utcOffsetSeconds) { builder.addInt(6, utcOffsetSeconds, 0); }
  public static void addTimezone(FlatBufferBuilder builder, int timezoneOffset) { builder.addOffset(7, timezoneOffset, 0); }
  public static void addTimezoneAbbreviation(FlatBufferBuilder builder, int timezoneAbbreviationOffset) { builder.addOffset(8, timezoneAbbreviationOffset, 0); }
  public static void addCurrent(FlatBufferBuilder builder, int currentOffset) { builder.addOffset(9, currentOffset, 0); }
  public static void addDaily(FlatBufferBuilder builder, int dailyOffset) { builder.addOffset(10, dailyOffset, 0); }
  public static void addHourly(FlatBufferBuilder builder, int hourlyOffset) { builder.addOffset(11, hourlyOffset, 0); }
  public static void addMinutely15(FlatBufferBuilder builder, int minutely15Offset) { builder.addOffset(12, minutely15Offset, 0); }
  public static void addSixHourly(FlatBufferBuilder builder, int sixHourlyOffset) { builder.addOffset(13, sixHourlyOffset, 0); }
  public static int endWeatherApiResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishWeatherApiResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedWeatherApiResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WeatherApiResponse get(int j) { return get(new WeatherApiResponse(), j); }
    public WeatherApiResponse get(WeatherApiResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

