// automatically generated by the FlatBuffers compiler, do not modify

package com.open_meteo.sdk;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SeriesAndTime extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static SeriesAndTime getRootAsSeriesAndTime(ByteBuffer _bb) { return getRootAsSeriesAndTime(_bb, new SeriesAndTime()); }
  public static SeriesAndTime getRootAsSeriesAndTime(ByteBuffer _bb, SeriesAndTime obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SeriesAndTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long start() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long end() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int interval() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public com.open_meteo.sdk.Series series(int j) { return series(new com.open_meteo.sdk.Series(), j); }
  public com.open_meteo.sdk.Series series(com.open_meteo.sdk.Series obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int seriesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public com.open_meteo.sdk.Series.Vector seriesVector() { return seriesVector(new com.open_meteo.sdk.Series.Vector()); }
  public com.open_meteo.sdk.Series.Vector seriesVector(com.open_meteo.sdk.Series.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSeriesAndTime(FlatBufferBuilder builder,
      long start,
      long end,
      int interval,
      int seriesOffset) {
    builder.startTable(4);
    SeriesAndTime.addEnd(builder, end);
    SeriesAndTime.addStart(builder, start);
    SeriesAndTime.addSeries(builder, seriesOffset);
    SeriesAndTime.addInterval(builder, interval);
    return SeriesAndTime.endSeriesAndTime(builder);
  }

  public static void startSeriesAndTime(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addStart(FlatBufferBuilder builder, long start) { builder.addLong(0, start, 0L); }
  public static void addEnd(FlatBufferBuilder builder, long end) { builder.addLong(1, end, 0L); }
  public static void addInterval(FlatBufferBuilder builder, int interval) { builder.addInt(2, interval, 0); }
  public static void addSeries(FlatBufferBuilder builder, int seriesOffset) { builder.addOffset(3, seriesOffset, 0); }
  public static int createSeriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSeriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSeriesAndTime(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SeriesAndTime get(int j) { return get(new SeriesAndTime(), j); }
    public SeriesAndTime get(SeriesAndTime obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

