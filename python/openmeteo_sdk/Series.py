# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class Series(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Series()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeries(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Series
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Series
    def Variable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Series
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Series
    def Aggregation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Series
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Series
    def PressureLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Series
    def Depth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Series
    def DepthTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Series
    def EnsembleMember(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Series
    def Values(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Series
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Series
    def ValuesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Series
    def ValuesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Series
    def ValuesInt64(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Series
    def ValuesInt64AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # Series
    def ValuesInt64Length(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Series
    def ValuesInt64IsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def SeriesStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def Start(builder: flatbuffers.Builder):
    SeriesStart(builder)

def SeriesAddVariable(builder: flatbuffers.Builder, variable: int):
    builder.PrependInt8Slot(0, variable, 0)

def AddVariable(builder: flatbuffers.Builder, variable: int):
    SeriesAddVariable(builder, variable)

def SeriesAddUnit(builder: flatbuffers.Builder, unit: int):
    builder.PrependInt8Slot(1, unit, 0)

def AddUnit(builder: flatbuffers.Builder, unit: int):
    SeriesAddUnit(builder, unit)

def SeriesAddAggregation(builder: flatbuffers.Builder, aggregation: int):
    builder.PrependInt8Slot(2, aggregation, 0)

def AddAggregation(builder: flatbuffers.Builder, aggregation: int):
    SeriesAddAggregation(builder, aggregation)

def SeriesAddAltitude(builder: flatbuffers.Builder, altitude: int):
    builder.PrependInt16Slot(3, altitude, 0)

def AddAltitude(builder: flatbuffers.Builder, altitude: int):
    SeriesAddAltitude(builder, altitude)

def SeriesAddPressureLevel(builder: flatbuffers.Builder, pressureLevel: int):
    builder.PrependInt16Slot(4, pressureLevel, 0)

def AddPressureLevel(builder: flatbuffers.Builder, pressureLevel: int):
    SeriesAddPressureLevel(builder, pressureLevel)

def SeriesAddDepth(builder: flatbuffers.Builder, depth: int):
    builder.PrependInt16Slot(5, depth, 0)

def AddDepth(builder: flatbuffers.Builder, depth: int):
    SeriesAddDepth(builder, depth)

def SeriesAddDepthTo(builder: flatbuffers.Builder, depthTo: int):
    builder.PrependInt16Slot(6, depthTo, 0)

def AddDepthTo(builder: flatbuffers.Builder, depthTo: int):
    SeriesAddDepthTo(builder, depthTo)

def SeriesAddEnsembleMember(builder: flatbuffers.Builder, ensembleMember: int):
    builder.PrependInt16Slot(7, ensembleMember, 0)

def AddEnsembleMember(builder: flatbuffers.Builder, ensembleMember: int):
    SeriesAddEnsembleMember(builder, ensembleMember)

def SeriesAddValues(builder: flatbuffers.Builder, values: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder: flatbuffers.Builder, values: int):
    SeriesAddValues(builder, values)

def SeriesStartValuesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems: int) -> int:
    return SeriesStartValuesVector(builder, numElems)

def SeriesAddValuesInt64(builder: flatbuffers.Builder, valuesInt64: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(valuesInt64), 0)

def AddValuesInt64(builder: flatbuffers.Builder, valuesInt64: int):
    SeriesAddValuesInt64(builder, valuesInt64)

def SeriesStartValuesInt64Vector(builder, numElems: int) -> int:
    return builder.StartVector(8, numElems, 8)

def StartValuesInt64Vector(builder, numElems: int) -> int:
    return SeriesStartValuesInt64Vector(builder, numElems)

def SeriesEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SeriesEnd(builder)
