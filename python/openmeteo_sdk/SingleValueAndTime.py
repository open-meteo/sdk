# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from openmeteo_sdk.SingleValue import SingleValue
from typing import Optional
np = import_numpy()

class SingleValueAndTime(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SingleValueAndTime()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSingleValueAndTime(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SingleValueAndTime
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SingleValueAndTime
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SingleValueAndTime
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SingleValueAndTime
    def Series(self, j: int) -> Optional[SingleValue]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = SingleValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SingleValueAndTime
    def SeriesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SingleValueAndTime
    def SeriesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SingleValueAndTimeStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def Start(builder: flatbuffers.Builder):
    SingleValueAndTimeStart(builder)

def SingleValueAndTimeAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependInt64Slot(0, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    SingleValueAndTimeAddTime(builder, time)

def SingleValueAndTimeAddInterval(builder: flatbuffers.Builder, interval: int):
    builder.PrependInt32Slot(1, interval, 0)

def AddInterval(builder: flatbuffers.Builder, interval: int):
    SingleValueAndTimeAddInterval(builder, interval)

def SingleValueAndTimeAddSeries(builder: flatbuffers.Builder, series: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(series), 0)

def AddSeries(builder: flatbuffers.Builder, series: int):
    SingleValueAndTimeAddSeries(builder, series)

def SingleValueAndTimeStartSeriesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSeriesVector(builder, numElems: int) -> int:
    return SingleValueAndTimeStartSeriesVector(builder, numElems)

def SingleValueAndTimeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return SingleValueAndTimeEnd(builder)
